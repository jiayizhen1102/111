{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1EYKg-YjfwXXqzdem9sEEyLz5XZLTCjL8",
      "authorship_tag": "ABX9TyMM+pZ/kwrBcRG1LAGfqMA/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jiayizhen1102/111/blob/main/Untitled2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import zipfile\n",
        "import random\n",
        "import shutil\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from shutil import copyfile\n",
        "from os import getcwd\n",
        "from os import listdir\n",
        "import cv2\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Conv2D, Input, ZeroPadding2D, BatchNormalization, Activation, MaxPooling2D, Flatten, Dense\n",
        "from tensorflow.keras.models import Model, load_model\n",
        "from tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import f1_score\n",
        "from sklearn.utils import shuffle\n",
        "import imutils\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image  as mpimg\n",
        "\n",
        "\n",
        "print(\"The number of images with facemask labelled 'yes':\",len(os.listdir(r'/content/drive/MyDrive/06_Face-Mask-Detection-master/data/facemask-dataset/train/with_mask')))\n",
        "print(\"The number of images with facemask labelled 'no':\",len(os.listdir(r'/content/drive/MyDrive/06_Face-Mask-Detection-master/data/facemask-dataset/train/without_mask')))\n",
        "\n",
        "#新增\n",
        "print(\"The number of images with facemask labelled 'yes':\",len(os.listdir(r'/content/drive/MyDrive/06_Face-Mask-Detection-master/data/facemask-dataset/validation/with_mask')))\n",
        "print(\"The number of images with facemask labelled 'no':\",len(os.listdir(r'/content/drive/MyDrive/06_Face-Mask-Detection-master/data/facemask-dataset/validation/without_mask')))\n",
        "#数据集\n",
        "TRAINING_DIR = r\"/content/drive/MyDrive/06_Face-Mask-Detection-master/data/facemask-dataset/train\"\n",
        "#新增\n",
        "VALIDATION_DIR=r'/content/drive/MyDrive/06_Face-Mask-Detection-master/data/facemask-dataset/validation'\n",
        "#数据集处理：数据增强\n",
        "train_datagen = ImageDataGenerator(rescale=1.0/255,\n",
        "                                   rotation_range=40,\n",
        "                                   width_shift_range=0.2,\n",
        "                                   height_shift_range=0.2,\n",
        "                                   shear_range=0.2,\n",
        "                                   zoom_range=0.2,\n",
        "                                   horizontal_flip=True,\n",
        "                                   fill_mode='nearest')\n",
        "\n",
        "#新增\n",
        "validation_datagen = ImageDataGenerator(rescale=1.0/255,)\n",
        "\n",
        "\n",
        "\n",
        "#标签生成，批次定义\n",
        "train_generator = train_datagen.flow_from_directory(TRAINING_DIR,# 目标目录\n",
        "                                                    batch_size=64,#表示批次大小\n",
        "                                                    classes=['with_mask','without_mask'],\n",
        "                                                    target_size=(150, 150))# 将所有图像的大小调整为 150×150\n",
        "print(train_generator)\n",
        "\n",
        "#新增\n",
        "validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,\n",
        "                                                    batch_size=64,#表示批次大小\n",
        "                                                    classes=['with_mask','without_mask'],\n",
        "                                                    target_size=(150, 150))\n",
        "print(validation_generator)\n",
        "\n",
        "#创建模型\n",
        "model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Conv2D(100, (3,3), activation='relu',padding='same', input_shape=(150, 150, 3)),\n",
        "\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Conv2D(100, (3,3), activation='relu',padding='same',),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "\n",
        "    tf.keras.layers.Flatten(),\n",
        "    #tf.keras.layers.Dropout(0.2),\n",
        "    tf.keras.layers.Dense(50, activation='relu'),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Dense(2, activation='softmax')\n",
        "])\n",
        "#模型总结\n",
        "model.summary()\n",
        "#编译模型\n",
        "#选择adam优化器，损失函数：使用二分类交叉熵binary_crossentropy\n",
        "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['mse','acc'])\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#模型训练记录(使用checkpoint保存权重)\n",
        "checkpoint = ModelCheckpoint('model-{epoch:03d}.model',monitor='val_loss',verbose=0,save_best_only=True,mode='auto')\n",
        "#训练模型（【Python生成器】：它的第一个参数应该是一个 Python 生成器，可以不停地生 成输入和目标组成的批量，比如 train_generator。）\n",
        "history = model.fit_generator(train_generator,\n",
        "                              epochs=10,\n",
        "                              validation_data=validation_generator,\n",
        "                              callbacks=[checkpoint])\n",
        "#模型保存\n",
        "model.save(filepath=r'/content/drive/MyDrive/06_Face-Mask-Detection-master') #保存模型到那个文件路径\n",
        "\n",
        "\n",
        "\n",
        "#模型训练结果展示\n",
        "print(history.history.keys())\n",
        "# loss\n",
        "plt.plot(history.epoch,history.history.get('loss'),color='green',label = 'loss')\n",
        "plt.plot(history.epoch,history.history.get('val_loss'),color='blue',label = 'val_loss')\n",
        "# acc\n",
        "plt.plot(history.epoch,history.history.get('acc'),color='red',label = 'acc')\n",
        "plt.title('training and validation')\n",
        "plt.xlabel('epochs')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Yunb53Xvc1_z",
        "outputId": "7e676cf4-ca64-4412-c912-4ec188b9a51f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The number of images with facemask labelled 'yes': 658\n",
            "The number of images with facemask labelled 'no': 657\n",
            "The number of images with facemask labelled 'yes': 51\n",
            "The number of images with facemask labelled 'no': 1\n",
            "Found 1315 images belonging to 2 classes.\n",
            "<keras.preprocessing.image.DirectoryIterator object at 0x7f6df028a5b0>\n",
            "Found 466 images belonging to 2 classes.\n",
            "<keras.preprocessing.image.DirectoryIterator object at 0x7f6df028a310>\n",
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_2 (Conv2D)           (None, 150, 150, 100)     2800      \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPooling  (None, 75, 75, 100)      0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 75, 75, 100)       0         \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 75, 75, 100)       90100     \n",
            "                                                                 \n",
            " max_pooling2d_3 (MaxPooling  (None, 37, 37, 100)      0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten_1 (Flatten)         (None, 136900)            0         \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 50)                6845050   \n",
            "                                                                 \n",
            " dropout_3 (Dropout)         (None, 50)                0         \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 2)                 102       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 6,938,052\n",
            "Trainable params: 6,938,052\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-ab3699a78327>:94: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  history = model.fit_generator(train_generator,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.7383 - mse: 0.2777 - acc: 0.5567"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 301s 14s/step - loss: 0.7383 - mse: 0.2777 - acc: 0.5567 - val_loss: 0.7128 - val_mse: 0.2714 - val_acc: 0.3562\n",
            "Epoch 2/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.6673 - mse: 0.2423 - acc: 0.5985"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 179s 8s/step - loss: 0.6673 - mse: 0.2423 - acc: 0.5985 - val_loss: 0.7077 - val_mse: 0.2674 - val_acc: 0.3734\n",
            "Epoch 3/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.6334 - mse: 0.2193 - acc: 0.6312"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 193s 9s/step - loss: 0.6334 - mse: 0.2193 - acc: 0.6312 - val_loss: 0.6986 - val_mse: 0.2675 - val_acc: 0.4678\n",
            "Epoch 4/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.6013 - mse: 0.2012 - acc: 0.6821"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 185s 9s/step - loss: 0.6013 - mse: 0.2012 - acc: 0.6821 - val_loss: 0.6703 - val_mse: 0.2568 - val_acc: 0.5258\n",
            "Epoch 5/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.5804 - mse: 0.1958 - acc: 0.7057"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 173s 8s/step - loss: 0.5804 - mse: 0.1958 - acc: 0.7057 - val_loss: 0.6316 - val_mse: 0.2177 - val_acc: 0.6588\n",
            "Epoch 6/10\n",
            "21/21 [==============================] - 181s 9s/step - loss: 0.5450 - mse: 0.1770 - acc: 0.7559 - val_loss: 0.6325 - val_mse: 0.2388 - val_acc: 0.6631\n",
            "Epoch 7/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.5379 - mse: 0.1766 - acc: 0.7643"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 180s 9s/step - loss: 0.5379 - mse: 0.1766 - acc: 0.7643 - val_loss: 0.5976 - val_mse: 0.1998 - val_acc: 0.7232\n",
            "Epoch 8/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.5514 - mse: 0.1805 - acc: 0.7612"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 174s 8s/step - loss: 0.5514 - mse: 0.1805 - acc: 0.7612 - val_loss: 0.5863 - val_mse: 0.1975 - val_acc: 0.7403\n",
            "Epoch 9/10\n",
            "21/21 [==============================] - ETA: 0s - loss: 0.4828 - mse: 0.1528 - acc: 0.8008"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r21/21 [==============================] - 186s 9s/step - loss: 0.4828 - mse: 0.1528 - acc: 0.8008 - val_loss: 0.5671 - val_mse: 0.1747 - val_acc: 0.7682\n",
            "Epoch 10/10\n",
            "21/21 [==============================] - 175s 8s/step - loss: 0.4824 - mse: 0.1599 - acc: 0.7878 - val_loss: 0.5807 - val_mse: 0.1990 - val_acc: 0.7210\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'mse', 'acc', 'val_loss', 'val_mse', 'val_acc'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G1GLJvURVU5e",
        "outputId": "dc8271d3-9056-48f3-877c-5a6dc4ba76c4"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    }
  ]
}
